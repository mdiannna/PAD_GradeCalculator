This is the folder for gateway


- exaple requests to register a service: (should be POST)
curl -d '{"service_name": "Service1", "address": "111.111.111.111", "type":"type1"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register
curl -d '{"service_name": "Service5", "address": "278.678.111.111", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register 

- pentru test service;
curl -d '{"service_name": "Service1_new", "address": "http://127.0.0.1:6005/", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register 

- test service rpc
curl -d '{"service_name": "ServiceRPC1_new", "address": "http://127.0.0.1:6003/", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register 

- check /nota-teorie service: (with POST request)
curl -d '{"Hello!"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/nota-teorie?student=NumePrenume



- POST /init-student {“student”: “NumePrenume”, “grupa” :”FAF”}
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/init-student




curl  http://127.0.0.1:5000/registered-services



- pentru requesturi directe la servicii:
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:6005/init_student
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:6004/init_student
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:6003/init_student


- pentru requesturi cum ar trebui sa fie la gateway (daca ruleaza pe portul 5000)
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/init_student
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/init_student
curl -d '{"student":"Diana Marusic", "grupa": "FAF-171"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/init_student





$ docker pull mongo:latest
https://medium.com/faun/managing-mongodb-on-docker-with-docker-compose-26bf8a0bbae3

Docker:
sudo docker build -t flask-gateway .
sudo docker run --name gateway -p 5000:5000 flask-gateway



sudo service redis stop
sudo docker build -t service-sanic2 .


sudo docker build -t csharp-service1 .



curl -d '{"service_name": "Service-Sanic2", "address": "http://192.168.0.20:8000/", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register

# curl -d '{"student":"Diana Marusic"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/nota_finala

  curl -X GET \
      -H "content-type: application/json" \
      -H "Accept: application/json" \
      -d '{"student":"Diana Marusic"}' \
      "http://127.0.0.1:5000/nota-finala"



### RUnning on local:
start redis:
$ sudo systemctl start redis
$ din app.py alege la redis host sa fie localhost




curl -d '{"service_name": "Service-Sanic2", "address": "http://192.168.0.20:8000/", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register

curl -X GET   http://127.0.0.1:5000/nota-finala?student=Diana



// register from docker
curl -d '{"service_name": "Service-Sanic2", "address": "http://service-s2:8000/", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register







workflow:
$ sudo service redis stop
$ cd Gateway
$ sudo docker build -t flask-gateway .
$ cd ../Services-Sanic
$ sudo docker build -t service-sanic2 .

$cd ../CSharp-service1
$ sudo docker build -t csharp-service1 .

$ sudo docker-compose up
$ curl -d '{"service_name": "Service-Sanic2", "address": "http://service-s2:8000/", "type":"type2"}' -H 'Content-Type: application/json' http://127.0.0.1:5000/service-register

se poate de testat
$ python Services-Sanic/test_service.py


tutorial bd bash:
https://docs.microsoft.com/en-us/sql/linux/quickstart-install-connect-docker?view=sql-server-ver15&pivots=cs1-bash



CREATE TABLE Students (Id INT PRIMARY KEY, Name VARCHAR(50), Status VARCHAR(50), Grupa VARCHAR(20) )
CREATE TABLE Marks (Id INT PRIMARY KEY, Value INT, Type NVARCHAR(50), AtestationNo INT, StudentId INT, Status NVARCHAR(50) )

INT PRIMARY KEY IDENTITY (1, 1)


---pentru database sqlserver!!!!! dupa docker compose up---

sudo docker exec -ti f79ba161b664 bash

/opt/mssql-tools/bin/sqlcmd -S localhost -U SA -P "PAD_password123"

CREATE DATABASE University
GO
CREATE TABLE Students (Id INT PRIMARY KEY IDENTITY (1, 1), Name VARCHAR(50), Status VARCHAR(50), Grupa VARCHAR(20) )
GO
CREATE TABLE Marks (Id INT PRIMARY KEY  IDENTITY (1, 1), Value INT, Type NVARCHAR(50), AtestationNo INT, StudentId INT, Status NVARCHAR(50) )
GO



https://www.sqlservertutorial.net/sql-server-basics/sql-server-create-table/